"""
Valida√ß√£o final dos componentes implementados
"""
import sys
import os

backend_path = r"c:\Users\adson.silva_contabil\democratiza-ai\backend"
if backend_path not in sys.path:
    sys.path.insert(0, backend_path)

def test_components():
    """Testa se todos os componentes foram implementados corretamente"""
    
    print("üîç VALIDA√á√ÉO FINAL - DEMOCRATIZA AI")
    print("=" * 50)
    
    results = {}
    
    # 1. Test R2 Storage Service
    try:
        from app.services.storage_service import r2_service, CloudflareR2Service
        print("‚úÖ 1. Cloudflare R2 Storage Service")
        results["r2_storage"] = True
        
        # Check if R2 service has required methods
        methods = ["upload_file", "download_file", "delete_file", "list_user_files"]
        for method in methods:
            if hasattr(r2_service, method):
                print(f"   ‚úÖ {method}")
            else:
                print(f"   ‚ùå {method}")
                results["r2_storage"] = False
                
    except Exception as e:
        print(f"‚ùå 1. R2 Storage Service: {e}")
        results["r2_storage"] = False
    
    # 2. Test API Endpoints
    try:
        from app.api.v1 import storage
        print("‚úÖ 2. Storage API Endpoints")
        results["api_endpoints"] = True
        
    except Exception as e:
        print(f"‚ùå 2. Storage API Endpoints: {e}")
        results["api_endpoints"] = False
    
    # 3. Test Document Processor Integration
    try:
        from app.workers.document_processor import DocumentProcessor
        processor = DocumentProcessor()
        
        # Check if R2 integration exists
        if hasattr(processor, 'storage_service'):
            print("‚úÖ 3. Document Processor R2 Integration")
            results["document_processor"] = True
        else:
            print("‚ùå 3. Document Processor missing R2 integration")
            results["document_processor"] = False
            
    except Exception as e:
        print(f"‚ùå 3. Document Processor: {e}")
        results["document_processor"] = False
    
    # 4. Test Database Models
    try:
        from app.db.models import StorageAuditLog, Contract, User
        print("‚úÖ 4. Database Models (StorageAuditLog)")
        results["database_models"] = True
        
    except Exception as e:
        print(f"‚ùå 4. Database Models: {e}")
        results["database_models"] = False
    
    # 5. Test Frontend API Client
    frontend_api_path = r"c:\Users\adson.silva_contabil\democratiza-ai\frontend\lib\api.ts"
    if os.path.exists(frontend_api_path):
        with open(frontend_api_path, 'r', encoding='utf-8') as f:
            api_content = f.read()
            
        if "uploadToStorage" in api_content and "FileMetadata" in api_content:
            print("‚úÖ 5. Frontend API Integration")
            results["frontend_api"] = True
        else:
            print("‚ùå 5. Frontend API missing R2 methods")
            results["frontend_api"] = False
    else:
        print("‚ùå 5. Frontend API file not found")
        results["frontend_api"] = False
    
    # 6. Test Configuration
    try:
        from app.core.config import settings
        
        r2_configs = [
            'CLOUDFLARE_ACCOUNT_ID',
            'CLOUDFLARE_R2_ACCESS_KEY', 
            'CLOUDFLARE_R2_SECRET_KEY',
            'CLOUDFLARE_R2_BUCKET',
            'CLOUDFLARE_R2_ENDPOINT'
        ]
        
        config_complete = True
        for config in r2_configs:
            if hasattr(settings, config):
                print(f"   ‚úÖ {config}")
            else:
                print(f"   ‚ùå {config}")
                config_complete = False
        
        if config_complete:
            print("‚úÖ 6. R2 Configuration")
            results["configuration"] = True
        else:
            print("‚ùå 6. R2 Configuration incomplete")
            results["configuration"] = False
            
    except Exception as e:
        print(f"‚ùå 6. Configuration: {e}")
        results["configuration"] = False
    
    # Summary
    print("\n" + "=" * 50)
    print("üìä RESUMO DA IMPLEMENTA√á√ÉO")
    print("=" * 50)
    
    passed = sum(results.values())
    total = len(results)
    
    for component, status in results.items():
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"{status_icon} {component.replace('_', ' ').title()}")
    
    print(f"\nüéØ SCORE: {passed}/{total} componentes implementados")
    
    if passed == total:
        print("\nüéâ IMPLEMENTA√á√ÉO COMPLETA!")
        print("‚ú® Sistema Cloudflare R2 totalmente integrado")
        print("üöÄ Pronto para produ√ß√£o!")
        
        print("\nüìã CHECKLIST CONCLU√çDO:")
        print("   ‚úÖ Credenciais R2 configuradas (seguras)")
        print("   ‚úÖ Servi√ßo de storage implementado")
        print("   ‚úÖ API endpoints criados") 
        print("   ‚úÖ Document processor integrado")
        print("   ‚úÖ Database models criados")
        print("   ‚úÖ Frontend API atualizada")
        print("   ‚úÖ Configura√ß√µes validadas")
        
        return True
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} componentes precisam de aten√ß√£o")
        return False

if __name__ == "__main__":
    success = test_components()
    exit(0 if success else 1)