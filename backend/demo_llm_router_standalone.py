"""
Democratiza AI - Demonstra√ß√£o Standalone do Roteador de LLMs
Simula√ß√£o completa sem depend√™ncias externas
"""

import asyncio
import json
from datetime import datetime
from typing import Dict, Any, List
from enum import Enum

class ComplexityLevel(Enum):
    """N√≠veis de complexidade de contratos"""
    SIMPLES = "simples"
    MEDIO = "medio" 
    COMPLEXO = "complexo"
    ESPECIALIZADO = "especializado"

class LLMRouterDemo:
    """Demonstra√ß√£o completa do sistema de roteamento inteligente"""
    
    def __init__(self):
        print("ü§ñ DEMOCRATIZA AI - SISTEMA DE ROTEAMENTO INTELIGENTE DE LLMs")
        print("=" * 70)
        print()
        
        # Configura√ß√£o dos modelos (custos reais)
        self.llm_costs = {
            'groq_llama': {
                'cost_per_1k_tokens': 0.0005,  # Muito econ√¥mico
                'speed_avg_seconds': 2.3,
                'quality': 'Boa para an√°lises simples'
            },
            'anthropic_haiku': {
                'cost_per_1k_tokens': 0.0015,  # Econ√¥mico
                'speed_avg_seconds': 4.1,
                'quality': 'Boa para an√°lises m√©dias'
            },
            'anthropic_sonnet': {
                'cost_per_1k_tokens': 0.015,   # M√©dio
                'speed_avg_seconds': 6.8,
                'quality': 'Excelente para an√°lises complexas'
            },
            'anthropic_opus': {
                'cost_per_1k_tokens': 0.075,   # Premium
                'speed_avg_seconds': 9.2,
                'quality': 'M√°xima qualidade para casos especializados'
            }
        }
        
        # Contratos de exemplo com diferentes complexidades
        self.sample_contracts = {
            ComplexityLevel.SIMPLES: {
                'title': 'Contrato de Streaming Netflix',
                'text': """
                CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS DE STREAMING
                
                CONTRATANTE: Jo√£o Silva
                CONTRATADA: Netflix Brasil
                
                O CONTRATANTE concorda em pagar mensalidade de R$ 25,90 pelo acesso ao cat√°logo de filmes e s√©ries.
                
                1. PAGAMENTO: Cobran√ßa mensal autom√°tica no cart√£o de cr√©dito
                2. CANCELAMENTO: Pode ser feito a qualquer momento
                3. PRAZO: Indeterminado, renova√ß√£o autom√°tica
                4. USO: Streaming de conte√∫do para entretenimento pessoal
                """,
                'metadata': {
                    'valor': 25.90,
                    'duracao_meses': 12,
                    'tipo': 'streaming'
                }
            },
            
            ComplexityLevel.MEDIO: {
                'title': 'Contrato de Loca√ß√£o Residencial',
                'text': """
                CONTRATO DE LOCA√á√ÉO DE IM√ìVEL RESIDENCIAL
                
                LOCADOR: Maria Santos
                LOCAT√ÅRIO: Pedro Oliveira
                IM√ìVEL: Apartamento Rua das Flores, 123
                
                Cl√°usula 1¬™ - DO OBJETO: Loca√ß√£o de apartamento mobiliado com 2 quartos
                Cl√°usula 2¬™ - DO PRAZO: 24 meses, iniciando em 01/01/2024
                Cl√°usula 3¬™ - DO VALOR: R$ 1.500,00 mensais, reajuste anual pelo IGPM
                Cl√°usula 4¬™ - DAS GARANTIAS: Cau√ß√£o de R$ 3.000,00 + Fiador
                Cl√°usula 5¬™ - DAS OBRIGA√á√ïES: Manuten√ß√£o preventiva por conta do locat√°rio
                Cl√°usula 6¬™ - DA RESCIS√ÉO: Multa de 3 alugu√©is para rescis√£o antecipada
                
                Art. 22 da Lei 8.245/91 - Obriga√ß√µes do locador
                """,
                'metadata': {
                    'valor': 1500.00,
                    'duracao_meses': 24,
                    'tipo': 'locacao_residencial'
                }
            },
            
            ComplexityLevel.COMPLEXO: {
                'title': 'Contrato de Presta√ß√£o de Servi√ßos Empresariais',
                'text': """
                CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS DE CONSULTORIA EMPRESARIAL
                
                CONTRATANTE: Tech Solutions Ltda (CNPJ 12.345.678/0001-90)
                CONTRATADA: Consulting Group S/A (CNPJ 98.765.432/0001-10)
                
                Cl√°usula 1¬™ - OBJETO: Presta√ß√£o de servi√ßos especializados de consultoria em transforma√ß√£o digital
                
                Cl√°usula 2¬™ - ESCOPO DOS SERVI√áOS:
                a) Diagn√≥stico organizacional completo
                b) Implementa√ß√£o de ERP integrado
                c) Treinamento de equipes t√©cnicas
                d) Suporte t√©cnico por 12 meses
                
                Cl√°usula 3¬™ - VALOR E FORMA DE PAGAMENTO:
                - Valor total: R$ 180.000,00 (cento e oitenta mil reais)
                - 30% na assinatura (R$ 54.000,00)
                - 40% na entrega do diagn√≥stico (R$ 72.000,00)
                - 30% na conclus√£o da implementa√ß√£o (R$ 54.000,00)
                
                Cl√°usula 4¬™ - PRAZO DE EXECU√á√ÉO: 18 meses, prorrog√°vel por m√∫tuo acordo
                
                Cl√°usula 5¬™ - CL√ÅUSULA PENAL: 
                - Atraso: 0,5% ao dia sobre valor em aberto
                - Rescis√£o unilateral: 20% sobre valor total do contrato
                
                Cl√°usula 6¬™ - CONFIDENCIALIDADE: Sigilo absoluto sobre informa√ß√µes t√©cnicas e comerciais
                
                Cl√°usula 7¬™ - PROPRIEDADE INTELECTUAL: Desenvolvimentos customizados permanecem com a CONTRATANTE
                
                Cl√°usula 8¬™ - FOR√áA MAIOR: Suspens√£o de obriga√ß√µes em casos de for√ßa maior ou caso fortuito
                
                Cl√°usula 9¬™ - FORO: Comarca de S√£o Paulo/SP, com ren√∫ncia a qualquer outro
                """,
                'metadata': {
                    'valor': 180000.00,
                    'duracao_meses': 18,
                    'tipo': 'prestacao_servicos_empresarial'
                }
            },
            
            ComplexityLevel.ESPECIALIZADO: {
                'title': 'Contrato de Previd√™ncia Privada PGBL',
                'text': """
                CONTRATO DE PLANO GERADOR DE BENEF√çCIO LIVRE - PGBL
                
                PARTICIPANTE: Carlos Eduardo Mendes (CPF 123.456.789-00)
                ENTIDADE: Brasilprev Seguros e Previd√™ncia S.A. (CNPJ 27.055.699/0001-02)
                
                PLANO: PGBL Crescimento Moderado
                
                Cl√°usula 1¬™ - DO REGIME PREVIDENCI√ÅRIO:
                Este contrato rege-se pela Lei Complementar n¬∫ 109/2001 e regulamenta√ß√£o da SUSEP
                
                Cl√°usula 2¬™ - DAS CONTRIBUI√á√ïES:
                - Contribui√ß√£o inicial: R$ 50.000,00
                - Contribui√ß√µes mensais: R$ 2.000,00 (indexadas ao INPC)
                - Contribui√ß√µes extras: Permitidas sem limite
                - Portabilidade: Permitida ap√≥s 60 dias da ades√£o
                
                Cl√°usula 3¬™ - DO REGIME TRIBUT√ÅRIO:
                Tributa√ß√£o regressiva conforme tabela da Receita Federal:
                - At√© 2 anos: 35%
                - 2 a 4 anos: 30%
                - 4 a 6 anos: 25%
                - 6 a 8 anos: 20%
                - 8 a 10 anos: 15%
                - Acima de 10 anos: 10%
                
                Cl√°usula 4¬™ - DAS TAXAS:
                - Taxa de administra√ß√£o: 2,5% a.a. sobre patrim√¥nio acumulado
                - Taxa de carregamento: 3% sobre aportes at√© R$ 10.000/ano
                - Taxa de performance: 20% sobre rendimento que exceder 100% do CDI
                
                Cl√°usula 5¬™ - DOS BENEF√çCIOS:
                - Renda mensal vital√≠cia
                - Renda mensal tempor√°ria (10, 15 ou 20 anos)
                - Pec√∫lio por morte
                - Resgate total ou parcial (sujeito √† tributa√ß√£o)
                
                Cl√°usula 6¬™ - DA COMPOSI√á√ÉO DA CARTEIRA:
                - At√© 70% em Renda Fixa (t√≠tulos p√∫blicos e privados)
                - At√© 30% em Renda Vari√°vel (a√ß√µes e fundos de investimento)
                - At√© 20% no Exterior (fundos cambiais)
                
                Cl√°usula 7¬™ - DAS GARANTIAS ATUARIAIS:
                T√°bua de mortalidade AT-2000 Basic masculina e feminina, com taxa de juros de 6% a.a.
                
                Cl√°usula 8¬™ - DA ALTERA√á√ÉO UNILATERAL:
                A Entidade poder√° alterar taxas e condi√ß√µes mediante comunica√ß√£o pr√©via de 60 dias
                e aprova√ß√£o da SUSEP.
                
                Fundamenta√ß√£o Legal:
                - Lei Complementar 109/2001 (Regime de Previd√™ncia Complementar)
                - Resolu√ß√£o CNSP 139/2005 (Planos PGBL)
                - Circular SUSEP 302/2005 (Taxas e Regulamenta√ß√£o)
                """,
                'metadata': {
                    'valor': 50000.00,
                    'duracao_meses': 360,  # 30 anos
                    'tipo': 'previdencia_privada_pgbl'
                }
            }
        }
    
    async def run_complete_demo(self):
        """Executa demonstra√ß√£o completa do sistema"""
        
        print("üìä DEMONSTRA√á√ÉO POR N√çVEL DE COMPLEXIDADE")
        print("-" * 50)
        
        total_cost_with_routing = 0.0
        total_cost_without_routing = 0.0
        analysis_results = []
        
        for complexity_level, contract_info in self.sample_contracts.items():
            print(f"\nüîç AN√ÅLISE: {contract_info['title']}")
            print(f"üìà Complexidade: {complexity_level.value.upper()}")
            print(f"üìÑ Tamanho: {len(contract_info['text'])} caracteres")
            
            # Simular an√°lise de complexidade
            complexity_analysis = self._analyze_complexity_mock(
                contract_info['text'], 
                contract_info['metadata']
            )
            
            print(f"üéØ Score de Complexidade: {complexity_analysis['total_score']}")
            print(f"üí° Reasoning: {complexity_analysis['reasoning']}")
            
            # Simular roteamento
            routing_decision = self._simulate_routing(complexity_level, len(contract_info['text']))
            
            print(f"ü§ñ Modelo Selecionado: {routing_decision['selected_model']}")
            print(f"üí∞ Custo Estimado: ${routing_decision['estimated_cost']:.4f}")
            print(f"‚ö° Tempo Estimado: {routing_decision['estimated_time']}s")
            
            # Comparar com custo se usasse sempre Opus
            opus_cost = routing_decision['opus_cost']
            savings = opus_cost - routing_decision['estimated_cost']
            savings_pct = (savings / opus_cost) * 100 if opus_cost > 0 else 0
            
            print(f"üí∏ Economia vs Opus: ${savings:.4f} ({savings_pct:.1f}%)")
            
            total_cost_with_routing += routing_decision['estimated_cost']
            total_cost_without_routing += opus_cost
            
            # Simular resultado da an√°lise
            analysis_preview = self._simulate_analysis_result(complexity_level, contract_info)
            print(f"üìã Preview da An√°lise:")
            print(f"   üéØ Risk Level: {analysis_preview['risk_level']}")
            print(f"   ‚ö†Ô∏è  Key Issues: {len(analysis_preview['issues'])} identificados")
            print(f"   üí° Recommendations: {len(analysis_preview['recommendations'])} sugest√µes")
            
            # Armazenar para estat√≠sticas
            analysis_results.append({
                'complexity': complexity_level,
                'contract': contract_info['title'],
                'model': routing_decision['selected_model'],
                'cost': routing_decision['estimated_cost'],
                'opus_cost': opus_cost,
                'savings': savings
            })
        
        # Resumo final
        print(f"\nüéâ RESUMO FINAL DA DEMONSTRA√á√ÉO")
        print("=" * 50)
        print(f"üí∞ Custo total com roteamento: ${total_cost_with_routing:.4f}")
        print(f"üí∏ Custo sem roteamento (s√≥ Opus): ${total_cost_without_routing:.4f}")
        
        total_savings = total_cost_without_routing - total_cost_with_routing
        savings_percentage = (total_savings / total_cost_without_routing) * 100 if total_cost_without_routing > 0 else 0
        
        print(f"üèÜ Economia Total: ${total_savings:.4f} ({savings_percentage:.1f}%)")
        print(f"üìä Efici√™ncia do Sistema: {savings_percentage:.1f}% de redu√ß√£o de custos")
        
        # Demonstrar distribui√ß√£o de uso
        print(f"\nüìà DISTRIBUI√á√ÉO DE MODELOS UTILIZADOS")
        print("-" * 45)
        
        model_usage = {}
        for result in analysis_results:
            model = result['model']
            if model not in model_usage:
                model_usage[model] = {'count': 0, 'total_cost': 0.0}
            model_usage[model]['count'] += 1
            model_usage[model]['total_cost'] += result['cost']
        
        for model, stats in model_usage.items():
            percentage = (stats['count'] / len(analysis_results)) * 100
            print(f"ü§ñ {model:<20}: {stats['count']:>1} uso ({percentage:>5.1f}%) | ${stats['total_cost']:>7.4f}")
        
        # Proje√ß√£o de economia em escala
        print(f"\nüìä PROJE√á√ÉO DE ECONOMIA EM ESCALA")
        print("-" * 40)
        
        monthly_analyses = [100, 500, 1000, 5000]
        for monthly in monthly_analyses:
            monthly_cost_smart = total_cost_with_routing * monthly / len(self.sample_contracts)
            monthly_cost_opus = total_cost_without_routing * monthly / len(self.sample_contracts)
            monthly_savings = monthly_cost_opus - monthly_cost_smart
            annual_savings = monthly_savings * 12
            
            print(f"üìÖ {monthly:>4} an√°lises/m√™s: ${monthly_savings:>7.2f}/m√™s | ${annual_savings:>8.2f}/ano economia")
        
        print(f"\n‚ú® BENEF√çCIOS DO SISTEMA:")
        print(f"   üéØ Roteamento inteligente baseado em complexidade real")
        print(f"   üí∞ Redu√ß√£o de {savings_percentage:.1f}% nos custos operacionais")
        print(f"   ‚ö° Otimiza√ß√£o autom√°tica de tempo vs qualidade")
        print(f"   üß† Qualidade adequada para cada tipo de an√°lise")
        print(f"   üìä M√©tricas detalhadas de performance e ROI")
        print(f"   üîÑ Aprendizado cont√≠nuo para melhores decis√µes")
        
        # Casos de uso espec√≠ficos
        print(f"\nüéØ CASOS DE USO RECOMENDADOS:")
        print("-" * 35)
        
        use_cases = {
            'groq_llama': 'Triagem inicial, contratos padronizados, an√°lises r√°pidas',
            'anthropic_haiku': 'Contratos comerciais m√©dios, relat√≥rios detalhados',
            'anthropic_sonnet': 'Contratos complexos, due diligence, an√°lises cr√≠ticas',
            'anthropic_opus': 'Casos especializados, previd√™ncia, M&A, compliance'
        }
        
        for model, use_case in use_cases.items():
            print(f"ü§ñ {model:<18}: {use_case}")
        
        print(f"\nüîß CONFIGURA√á√ïES RECOMENDADAS:")
        print("-" * 35)
        print(f"   üìä Monitoramento cont√≠nuo de custos por categoria")
        print(f"   üéõÔ∏è  Ajuste de thresholds baseado no volume de uso")
        print(f"   üìà A/B testing para valida√ß√£o de qualidade")
        print(f"   üîÑ Feedback loop para refinamento do roteamento")
        print(f"   üìã Relat√≥rios executivos de ROI mensal")
    
    def _analyze_complexity_mock(self, text: str, metadata: Dict[str, Any]) -> Dict[str, Any]:
        """Simula an√°lise de complexidade"""
        
        text_length = len(text)
        word_count = len(text.split())
        text_lower = text.lower()
        
        # Score baseado em tamanho
        size_score = min(word_count // 150, 8)
        
        # Score baseado em termos especializados
        specialized_terms = {
            'previd√™ncia': 4, 'aposentadoria': 4, 'susep': 3, 'pgbl': 4, 'vgbl': 4,
            'cl√°usula penal': 3, 'for√ßa maior': 2, 'arbitragem': 3,
            'propriedade intelectual': 3, 'confidencialidade': 2,
            'lei complementar': 2, 'cnpj': 1, 'rescis√£o': 2
        }
        
        specialized_score = sum(
            score for term, score in specialized_terms.items() 
            if term in text_lower
        )
        
        # Score baseado em valores monet√°rios
        import re
        money_matches = re.findall(r'R\$\s*[\d,.]+', text)
        money_score = min(len(money_matches), 5)
        
        # Score baseado em refer√™ncias legais  
        legal_refs = re.findall(r'Lei\s+\d+|Art\.|Cl√°usula|¬ß', text)
        legal_score = min(len(legal_refs) // 2, 6)
        
        # Score baseado em metadados
        metadata_score = 0
        if metadata.get('valor', 0) > 50000:
            metadata_score += 4
        elif metadata.get('valor', 0) > 10000:
            metadata_score += 2
            
        if metadata.get('duracao_meses', 0) > 60:
            metadata_score += 3
        elif metadata.get('duracao_meses', 0) > 12:
            metadata_score += 1
        
        total_score = size_score + specialized_score + money_score + legal_score + metadata_score
        
        reasoning_parts = []
        if specialized_score > 5:
            reasoning_parts.append(f"Termos altamente especializados ({specialized_score}pts)")
        elif specialized_score > 0:
            reasoning_parts.append(f"Termos especializados ({specialized_score}pts)")
            
        if legal_score > 3:
            reasoning_parts.append(f"Muitas refer√™ncias legais ({legal_score}pts)")
        elif legal_score > 0:
            reasoning_parts.append(f"Refer√™ncias legais ({legal_score}pts)")
            
        if metadata_score > 3:
            reasoning_parts.append("Alto valor/longo prazo")
        elif metadata_score > 0:
            reasoning_parts.append("Valor/prazo significativo")
            
        if size_score > 5:
            reasoning_parts.append("Documento extenso")
        
        reasoning = '; '.join(reasoning_parts) if reasoning_parts else f"An√°lise b√°sica (score: {total_score})"
        
        return {
            'total_score': total_score,
            'breakdown': {
                'size_score': size_score,
                'specialized_score': specialized_score,
                'money_score': money_score,
                'legal_score': legal_score,
                'metadata_score': metadata_score
            },
            'reasoning': reasoning
        }
    
    def _simulate_routing(self, complexity: ComplexityLevel, text_length: int) -> Dict[str, Any]:
        """Simula decis√£o de roteamento"""
        
        # Mapear complexidade para modelo
        routing_map = {
            ComplexityLevel.SIMPLES: 'groq_llama',
            ComplexityLevel.MEDIO: 'anthropic_haiku',
            ComplexityLevel.COMPLEXO: 'anthropic_sonnet',
            ComplexityLevel.ESPECIALIZADO: 'anthropic_opus'
        }
        
        selected_model = routing_map[complexity]
        model_config = self.llm_costs[selected_model]
        
        # Estimar tokens (aproxima√ß√£o: 4 chars per token + tokens de output)
        input_tokens = text_length // 4
        output_tokens = {
            ComplexityLevel.SIMPLES: 800,
            ComplexityLevel.MEDIO: 1500,
            ComplexityLevel.COMPLEXO: 2500,
            ComplexityLevel.ESPECIALIZADO: 4000
        }[complexity]
        
        total_tokens = input_tokens + output_tokens
        
        # Calcular custos
        estimated_cost = (total_tokens / 1000) * model_config['cost_per_1k_tokens']
        opus_cost = (total_tokens / 1000) * self.llm_costs['anthropic_opus']['cost_per_1k_tokens']
        
        return {
            'selected_model': selected_model,
            'estimated_cost': estimated_cost,
            'opus_cost': opus_cost,
            'estimated_time': model_config['speed_avg_seconds'],
            'estimated_tokens': total_tokens,
            'input_tokens': input_tokens,
            'output_tokens': output_tokens
        }
    
    def _simulate_analysis_result(self, complexity: ComplexityLevel, contract_info: Dict[str, Any]) -> Dict[str, Any]:
        """Simula resultado da an√°lise baseado na complexidade"""
        
        analysis_map = {
            ComplexityLevel.SIMPLES: {
                'risk_level': 'BAIXO',
                'issues': [
                    'Renova√ß√£o autom√°tica sem notifica√ß√£o pr√©via',
                    'Cobran√ßa recorrente no cart√£o de cr√©dito'
                ],
                'recommendations': [
                    'Verificar pol√≠tica de cancelamento',
                    'Monitorar extratos de cobran√ßa',
                    'Definir alerta de renova√ß√£o'
                ]
            },
            ComplexityLevel.MEDIO: {
                'risk_level': 'M√âDIO',
                'issues': [
                    'M√∫ltiplas garantias exigidas (cau√ß√£o + fiador)',
                    'Multa rescis√≥ria de 3 alugu√©is (alta)',
                    'Reajuste anual sem teto definido',
                    'Manuten√ß√£o por conta do locat√°rio'
                ],
                'recommendations': [
                    'Negociar redu√ß√£o para uma √∫nica garantia',
                    'Propor multa proporcional ao tempo restante',
                    'Estabelecer limite para reajustes',
                    'Esclarecer responsabilidades de manuten√ß√£o'
                ]
            },
            ComplexityLevel.COMPLEXO: {
                'risk_level': 'ALTO',
                'issues': [
                    'Cl√°usula penal de 20% muito elevada',
                    'Propriedade intelectual mal definida',
                    'Pagamento concentrado nas fases iniciais',
                    'Confidencialidade muito ampla',
                    'Foro de elei√ß√£o restritivo'
                ],
                'recommendations': [
                    'Renegociar cl√°usula penal para m√°ximo 10%',
                    'Detalhar direitos de propriedade intelectual',
                    'Equilibrar cronograma de pagamentos',
                    'Limitar escopo da confidencialidade',
                    'Avaliar alternativa de arbitragem'
                ]
            },
            ComplexityLevel.ESPECIALIZADO: {
                'risk_level': 'ALTO',
                'issues': [
                    'Taxa de administra√ß√£o 2,5% acima do mercado',
                    'Cl√°usula de altera√ß√£o unilateral muito ampla',
                    'Tributa√ß√£o regressiva pode ser desvantajosa',
                    'Taxa de performance de 20% muito alta',
                    'Composi√ß√£o de carteira sem transpar√™ncia'
                ],
                'recommendations': [
                    'Negociar taxa de administra√ß√£o m√°xima de 2%',
                    'Limitar altera√ß√µes unilaterais a casos espec√≠ficos',
                    'Simular cen√°rios tribut√°rios progressivo vs regressivo',
                    'Revisar taxa de performance para m√°ximo 15%',
                    'Exigir transpar√™ncia total da carteira',
                    'Considerar portabilidade para planos mais vantajosos'
                ]
            }
        }
        
        return analysis_map[complexity]

async def main():
    """Executa demonstra√ß√£o completa"""
    demo = LLMRouterDemo()
    await demo.run_complete_demo()

if __name__ == "__main__":
    print("üöÄ Iniciando demonstra√ß√£o do roteador inteligente de LLMs...")
    print()
    
    asyncio.run(main())