"""
Legal Knowledge Bootstrap System
Sistema completo de inicializa√ß√£o da base de conhecimento jur√≠dico brasileiro
"""
import asyncio
import sys
import os
from typing import List, Dict, Optional
from datetime import datetime
import json
import logging

# Add backend to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.services.legal_data_collector import LegalDataCollector, run_legal_data_collection
from app.services.regulatory_data_collector import RegulatoryDataCollector, run_regulatory_collection
from app.services.rag_service import rag_service
from app.db.database import AsyncSessionLocal
from sqlalchemy import text

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('legal_bootstrap.log')
    ]
)
logger = logging.getLogger(__name__)

class LegalKnowledgeBootstrap:
    """Sistema completo de bootstrap da base de conhecimento jur√≠dico"""
    
    def __init__(self):
        self.rag_service = rag_service
        self.total_indexed = 0
        self.errors = []
        
    async def run_complete_bootstrap(self):
        """Executa bootstrap completo da base jur√≠dica"""
        
        logger.info("üöÄ INICIANDO BOOTSTRAP COMPLETO DA BASE JUR√çDICA BRASILEIRA")
        logger.info("="*70)
        
        start_time = datetime.now()
        
        try:
            # 1. Verificar pr√©-requisitos
            await self._check_prerequisites()
            
            # 2. Coletar dados das fontes oficiais
            all_legal_data = await self._collect_all_legal_data()
            
            # 3. Indexar no RAG Service
            await self._index_collected_data(all_legal_data)
            
            # 4. Adicionar conhecimento base especializado
            await self._add_specialized_knowledge()
            
            # 5. Verificar integridade dos dados
            await self._verify_data_integrity()
            
            # 6. Gerar relat√≥rio final
            await self._generate_final_report(start_time)
            
            logger.info("üéâ BOOTSTRAP CONCLU√çDO COM SUCESSO!")
            
        except Exception as e:
            logger.error(f"‚ùå ERRO CR√çTICO NO BOOTSTRAP: {str(e)}")
            raise
    
    async def _check_prerequisites(self):
        """Verifica pr√©-requisitos do sistema"""
        
        logger.info("üîç Verificando pr√©-requisitos...")
        
        # Verificar conex√£o com banco
        try:
            async with AsyncSessionLocal() as db:
                result = await db.execute(text("SELECT 1"))
                logger.info("‚úÖ Conex√£o com banco de dados OK")
        except Exception as e:
            logger.error(f"‚ùå Erro de conex√£o com banco: {str(e)}")
            raise
        
        # Verificar extens√£o pg_vector
        try:
            async with AsyncSessionLocal() as db:
                result = await db.execute(text("SELECT * FROM pg_extension WHERE extname = 'vector'"))
                if result.fetchone():
                    logger.info("‚úÖ Extens√£o pg_vector ativa")
                else:
                    logger.warning("‚ö†Ô∏è  Extens√£o pg_vector n√£o encontrada - tentando criar...")
                    await db.execute(text("CREATE EXTENSION IF NOT EXISTS vector"))
                    await db.commit()
                    logger.info("‚úÖ Extens√£o pg_vector criada")
        except Exception as e:
            logger.error(f"‚ùå Erro com pg_vector: {str(e)}")
            raise
        
        # Verificar tabelas RAG
        try:
            async with AsyncSessionLocal() as db:
                result = await db.execute(text("SELECT tablename FROM pg_tables WHERE tablename IN ('legal_documents', 'legal_chunks', 'knowledge_base')"))
                tables = [row[0] for row in result.fetchall()]
                
                expected_tables = ['legal_documents', 'legal_chunks', 'knowledge_base']
                missing_tables = [t for t in expected_tables if t not in tables]
                
                if missing_tables:
                    logger.warning(f"‚ö†Ô∏è  Tabelas faltando: {missing_tables}")
                    logger.info("üí° Execute: alembic upgrade head")
                else:
                    logger.info("‚úÖ Todas as tabelas RAG existem")
        except Exception as e:
            logger.error(f"‚ùå Erro verificando tabelas: {str(e)}")
            raise
        
        # Verificar OpenAI API Key
        from app.core.config import settings
        if hasattr(settings, 'OPENAI_API_KEY') and settings.OPENAI_API_KEY:
            logger.info("‚úÖ OpenAI API Key configurada")
        else:
            logger.error("‚ùå OpenAI API Key n√£o configurada")
            logger.info("üí° Configure OPENAI_API_KEY no arquivo .env")
            raise ValueError("OpenAI API Key necess√°ria")
        
        logger.info("‚úÖ Todos os pr√©-requisitos atendidos")
    
    async def _collect_all_legal_data(self) -> List[Dict]:
        """Coleta dados de todas as fontes jur√≠dicas"""
        
        logger.info("\\nüìö INICIANDO COLETA DE DADOS JUR√çDICOS")
        logger.info("="*50)
        
        all_data = []
        
        try:
            # 1. Coletar leis federais e jurisprud√™ncia
            logger.info("üèõÔ∏è Coletando leis federais e jurisprud√™ncia...")
            legal_data, _ = await run_legal_data_collection()
            all_data.extend(legal_data)
            logger.info(f"‚úÖ Coletados {len(legal_data)} documentos legais")
            
            # 2. Coletar dados regulat√≥rios
            logger.info("üè¢ Coletando regulamenta√ß√µes de √≥rg√£os...")
            regulatory_data, _ = await run_regulatory_collection()
            all_data.extend(regulatory_data)
            logger.info(f"‚úÖ Coletados {len(regulatory_data)} documentos regulat√≥rios")
            
            logger.info(f"üìä Total de documentos coletados: {len(all_data)}")
            
            return all_data
            
        except Exception as e:
            logger.error(f"‚ùå Erro na coleta de dados: {str(e)}")
            raise
    
    async def _index_collected_data(self, legal_data: List[Dict]):
        """Indexa todos os dados coletados no RAG Service"""
        
        logger.info("\\nüîÑ INICIANDO INDEXA√á√ÉO NO RAG SERVICE")
        logger.info("="*50)
        
        indexed_count = 0
        errors_count = 0
        
        async with AsyncSessionLocal() as db:
            for i, doc_data in enumerate(legal_data, 1):
                try:
                    logger.info(f"üìÑ Indexando ({i}/{len(legal_data)}): {doc_data['title'][:60]}...")
                    
                    # Indexar documento legal
                    document_id = await self.rag_service.index_legal_document(
                        title=doc_data["title"],
                        content=doc_data["content"],
                        document_type=doc_data["document_type"],
                        category=doc_data["category"],
                        source=doc_data["source"],
                        reference_number=doc_data.get("reference_number", ""),
                        authority_level=doc_data.get("authority_level", "medium"),
                        legal_area=doc_data.get("legal_area", []),
                        keywords=doc_data.get("keywords", []),
                        chunk_size=1000,
                        chunk_overlap=200,
                        db=db
                    )
                    
                    indexed_count += 1
                    logger.info(f"‚úÖ Indexado: {document_id}")
                    
                    # Rate limiting para n√£o sobrecarregar OpenAI
                    if i % 5 == 0:
                        logger.info("‚è±Ô∏è  Pausa para rate limiting...")
                        await asyncio.sleep(2)
                    
                except Exception as e:
                    errors_count += 1
                    error_msg = f"Erro ao indexar {doc_data['title']}: {str(e)}"
                    logger.error(f"‚ùå {error_msg}")
                    self.errors.append(error_msg)
                    continue
        
        logger.info(f"üìä RESULTADO DA INDEXA√á√ÉO:")
        logger.info(f"   ‚úÖ Documentos indexados: {indexed_count}")
        logger.info(f"   ‚ùå Erros: {errors_count}")
        
        self.total_indexed = indexed_count
    
    async def _add_specialized_knowledge(self):
        """Adiciona conhecimento base especializado"""
        
        logger.info("\\nüß† ADICIONANDO CONHECIMENTO ESPECIALIZADO")
        logger.info("="*50)
        
        specialized_guidelines = [
            {
                "title": "Diretrizes para An√°lise de Contratos de Loca√ß√£o",
                "content": """
                GUIA COMPLETO PARA AN√ÅLISE DE CONTRATOS DE LOCA√á√ÉO
                
                1. CL√ÅUSULAS ESSENCIAIS
                - Identifica√ß√£o das partes (locador e locat√°rio)
                - Descri√ß√£o detalhada do im√≥vel
                - Prazo de loca√ß√£o (m√≠nimo 30 meses para residencial)
                - Valor do aluguel e data de vencimento
                - Forma de reajuste (IGP-M, IPCA ou outro √≠ndice)
                - Garantias oferecidas (cau√ß√£o, fiador, seguro)
                
                2. CL√ÅUSULAS DE RISCO ALTO
                - Multa compensat√≥ria superior a 3 alugu√©is
                - Cobran√ßa antecipada de mais de 1 aluguel
                - Responsabiliza√ß√£o do locat√°rio por reformas estruturais
                - Foro de elei√ß√£o em comarca diferente do im√≥vel
                - Ren√∫ncia antecipada a direitos do locat√°rio
                - Cl√°usula de n√£o indenizar benfeitorias necess√°rias
                
                3. VERIFICA√á√ïES JURISPRUDENCIAIS
                - STJ: Multa compensat√≥ria limitada a 3 alugu√©is (Precedente consolidado)
                - STJ: Benfeitorias necess√°rias s√£o sempre indeniz√°veis
                - STJ: Reforma estrutural √© responsabilidade do locador
                
                4. ALERTAS PARA CDC (Loca√ß√£o n√£o residencial)
                - Aplica√ß√£o subsidi√°ria em loca√ß√µes comerciais
                - Cl√°usulas abusivas segundo Art. 51 do CDC
                - Princ√≠pio da boa-f√© objetiva
                """,
                "category": "locacao",
                "subcategory": "diretrizes",
                "tags": ["locacao", "analise", "clausulas", "risco"],
                "source": "knowledge_base",
                "confidence_level": 0.95
            },
            {
                "title": "Identifica√ß√£o de Pr√°ticas Abusivas em Telecomunica√ß√µes",
                "content": """
                PR√ÅTICAS ABUSIVAS COMUNS EM CONTRATOS DE TELECOMUNICA√á√ïES
                
                1. CL√ÅUSULAS VEDADAS PELA ANATEL (Resolu√ß√£o 632/2014)
                - Foro de elei√ß√£o que dificulte defesa do usu√°rio
                - Invers√£o do √¥nus da prova contra o consumidor
                - Modifica√ß√£o unilateral sem aviso pr√©vio de 30 dias
                - Cobran√ßa por servi√ßos n√£o solicitados
                - Dificuldades excessivas para cancelamento
                
                2. DIREITOS GARANTIDOS AO USU√ÅRIO
                - Cancelamento gratuito em 7 dias (direito de arrependimento)
                - Atendimento gratuito em canais da prestadora
                - Compensa√ß√£o por indisponibilidade do servi√ßo
                - Informa√ß√µes claras sobre velocidade de internet
                - Portabilidade num√©rica gratuita
                
                3. ALERTAS DE COMPLIANCE
                - Verificar se h√° cl√°usula de perman√™ncia superior a 12 meses
                - Confirmar transpar√™ncia nas informa√ß√µes de cobran√ßa
                - Validar procedimentos de cancelamento
                - Verificar compensa√ß√µes por falha no servi√ßo
                
                4. PRECEDENTES RELEVANTES
                - Cancelamento deve ser no mesmo canal de contrata√ß√£o
                - Multa por fideliza√ß√£o limitada ao benef√≠cio recebido
                - Cobran√ßa indevida gera restitui√ß√£o em dobro
                """,
                "category": "telecom",
                "subcategory": "compliance",
                "tags": ["telecom", "ANATEL", "abusivas", "usuarios"],
                "source": "knowledge_base", 
                "confidence_level": 0.90
            },
            {
                "title": "An√°lise de Contratos Financeiros - Principais Riscos",
                "content": """
                GUIA DE AN√ÅLISE PARA CONTRATOS FINANCEIROS E BANC√ÅRIOS
                
                1. VERIFICA√á√ïES OBRIGAT√ìRIAS
                - Taxa Efetiva Anual (TEA) claramente informada
                - Valor total do financiamento
                - N√∫mero e valor das presta√ß√µes
                - Seguros obrigat√≥rios discriminados
                - IOF e outras taxas especificadas
                
                2. PR√ÅTICAS ABUSIVAS COMUNS
                - Capitaliza√ß√£o mensal de juros sem autoriza√ß√£o legal
                - Cumula√ß√£o de comiss√£o de perman√™ncia com juros
                - Anatocismo (juros sobre juros) n√£o autorizado
                - Cobran√ßa de tarifa n√£o prevista em regulamenta√ß√£o
                - Venda casada de produtos n√£o relacionados
                
                3. LIMITES LEGAIS E JURISPRUDENCIAIS
                - Taxa de juros: verificar se est√° dentro da m√©dia do mercado
                - Multa morat√≥ria: limitada a 2% sobre valor devido
                - Juros morat√≥rios: m√°ximo 1% ao m√™s ap√≥s vencimento
                - Comiss√£o de perman√™ncia: n√£o cumul√°vel com corre√ß√£o
                
                4. GARANTIAS E RISCOS
                - Avaliar proporcionalidade das garantias exigidas
                - Verificar se bem dado em garantia √© essencial √† fam√≠lia
                - Validar procedimentos de execu√ß√£o de garantias
                - Confirmar direito de quita√ß√£o antecipada com desconto
                
                5. COMPLIANCE BACEN
                - Transpar√™ncia nas informa√ß√µes (Resolu√ß√£o 4.753/19)
                - Procedimentos de reclama√ß√£o dispon√≠veis
                - Canais de atendimento adequados
                """,
                "category": "financeiro",
                "subcategory": "analise_risco", 
                "tags": ["financeiro", "BACEN", "juros", "garantias"],
                "source": "knowledge_base",
                "confidence_level": 0.88
            }
        ]
        
        guidelines_added = 0
        
        async with AsyncSessionLocal() as db:
            for guideline in specialized_guidelines:
                try:
                    kb_id = await self.rag_service.add_knowledge(
                        title=guideline["title"],
                        content=guideline["content"],
                        category=guideline["category"],
                        subcategory=guideline.get("subcategory"),
                        tags=guideline.get("tags", []),
                        source=guideline.get("source", "internal"),
                        confidence_level=guideline.get("confidence_level", 1.0),
                        db=db
                    )
                    
                    guidelines_added += 1
                    logger.info(f"‚úÖ Diretriz adicionada: {guideline['title']}")
                    
                except Exception as e:
                    error_msg = f"Erro ao adicionar diretriz {guideline['title']}: {str(e)}"
                    logger.error(f"‚ùå {error_msg}")
                    self.errors.append(error_msg)
        
        logger.info(f"üìä Diretrizes especializadas adicionadas: {guidelines_added}")
    
    async def _verify_data_integrity(self):
        """Verifica integridade dos dados indexados"""
        
        logger.info("\\nüîç VERIFICANDO INTEGRIDADE DOS DADOS")
        logger.info("="*50)
        
        async with AsyncSessionLocal() as db:
            try:
                # Verificar estat√≠sticas do RAG
                stats = await self.rag_service.get_knowledge_stats(db)
                
                logger.info("üìä ESTAT√çSTICAS DO KNOWLEDGE BASE:")
                logger.info(f"   üìÑ Total de entradas: {stats['total_entries']}")
                logger.info(f"   üìÅ Categorias: {stats['categories']}")
                logger.info(f"   üî¢ Dimens√£o dos embeddings: {stats['embedding_dimension']}")
                
                # Verificar documentos legais indexados
                legal_docs_result = await db.execute(text("SELECT COUNT(*) FROM legal_documents WHERE processing_status = 'indexed'"))
                legal_docs_count = legal_docs_result.scalar()
                logger.info(f"   üìö Documentos legais indexados: {legal_docs_count}")
                
                # Verificar chunks gerados
                chunks_result = await db.execute(text("SELECT COUNT(*) FROM legal_chunks WHERE embedding IS NOT NULL"))
                chunks_count = chunks_result.scalar()
                logger.info(f"   üß© Chunks com embeddings: {chunks_count}")
                
                # Teste de busca
                logger.info("\\nüß™ Testando busca vetorial...")
                test_results = await self.rag_service.search(
                    query="cl√°usula abusiva contrato",
                    limit=3,
                    db=db
                )
                
                logger.info(f"   üîç Resultados de teste: {len(test_results)} encontrados")
                for i, result in enumerate(test_results[:3], 1):
                    score = result.get('similarity_score', 0)
                    logger.info(f"   {i}. {result['title'][:40]}... (Score: {score:.3f})")
                
                logger.info("‚úÖ Integridade dos dados verificada")
                
            except Exception as e:
                logger.error(f"‚ùå Erro na verifica√ß√£o de integridade: {str(e)}")
                raise
    
    async def _generate_final_report(self, start_time: datetime):
        """Gera relat√≥rio final do bootstrap"""
        
        logger.info("\\nüìã GERANDO RELAT√ìRIO FINAL")
        logger.info("="*50)
        
        end_time = datetime.now()
        duration = end_time - start_time
        
        # Estat√≠sticas finais
        async with AsyncSessionLocal() as db:
            stats = await self.rag_service.get_knowledge_stats(db)
            
            legal_docs_result = await db.execute(text("SELECT COUNT(*) FROM legal_documents"))
            legal_docs_total = legal_docs_result.scalar()
            
            chunks_result = await db.execute(text("SELECT COUNT(*) FROM legal_chunks"))
            chunks_total = chunks_result.scalar()
        
        report = {
            "bootstrap_info": {
                "inicio": start_time.isoformat(),
                "fim": end_time.isoformat(), 
                "duracao_minutos": duration.total_seconds() / 60,
                "status": "CONCLU√çDO"
            },
            "estatisticas": {
                "documentos_indexados": self.total_indexed,
                "knowledge_base_entries": stats['total_entries'],
                "legal_documents": legal_docs_total,
                "legal_chunks": chunks_total,
                "categorias": stats['categories']
            },
            "erros": {
                "total_erros": len(self.errors),
                "detalhes": self.errors
            },
            "verificacao": {
                "integridade_ok": len(self.errors) < self.total_indexed * 0.1,  # Menos de 10% de erros
                "busca_funcionando": True,
                "embeddings_ok": chunks_total > 0
            }
        }
        
        # Salvar relat√≥rio
        report_filename = f"bootstrap_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        os.makedirs("reports", exist_ok=True)
        
        with open(f"reports/{report_filename}", 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        # Log do relat√≥rio
        logger.info("üéØ RELAT√ìRIO FINAL DO BOOTSTRAP")
        logger.info(f"‚è±Ô∏è  Dura√ß√£o: {duration.total_seconds()/60:.1f} minutos")
        logger.info(f"üìÑ Documentos processados: {self.total_indexed}")
        logger.info(f"üìä Knowledge Base entries: {stats['total_entries']}")
        logger.info(f"üß© Chunks gerados: {chunks_total}")
        logger.info(f"‚ùå Erros encontrados: {len(self.errors)}")
        logger.info(f"üíæ Relat√≥rio salvo: reports/{report_filename}")
        
        if len(self.errors) == 0:
            logger.info("üéâ BOOTSTRAP 100% SUCESSFUL!")
        elif len(self.errors) < self.total_indexed * 0.1:
            logger.info("‚úÖ BOOTSTRAP CONCLU√çDO COM SUCESSO (poucos erros)")
        else:
            logger.warning("‚ö†Ô∏è  BOOTSTRAP CONCLU√çDO COM ERROS SIGNIFICATIVOS")
        
        logger.info("\\nüöÄ BASE JUR√çDICA BRASILEIRA PRONTA PARA USO!")

async def main():
    """Fun√ß√£o principal para executar o bootstrap"""
    
    print("üáßüá∑ DEMOCRATIZA AI - BOOTSTRAP DA BASE JUR√çDICA BRASILEIRA")
    print("="*70)
    print("Inicializando base de conhecimento com fontes oficiais do Brasil")
    print("- Leis Federais (Planalto.gov.br)")
    print("- Jurisprud√™ncia (STJ)")  
    print("- Regulamenta√ß√µes (ANATEL, BACEN, SENACON)")
    print("- Diretrizes Especializadas")
    print("="*70)
    
    # Confirma√ß√£o do usu√°rio
    response = input("\\nDeseja continuar com o bootstrap completo? (s/n): ")
    if response.lower() != 's':
        print("‚ùå Bootstrap cancelado pelo usu√°rio")
        return
    
    try:
        bootstrap = LegalKnowledgeBootstrap()
        await bootstrap.run_complete_bootstrap()
        
        print("\\n" + "="*70)
        print("üéâ BOOTSTRAP CONCLU√çDO COM SUCESSO!")
        print("‚úÖ Base jur√≠dica brasileira est√° pronta para uso")
        print("üìö Agentes de IA agora t√™m acesso a conhecimento jur√≠dico especializado")
        print("‚öñÔ∏è An√°lises de contratos ser√£o mais precisas e fundamentadas")
        print("="*70)
        
    except KeyboardInterrupt:
        print("\\n‚èπÔ∏è  Bootstrap interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\\n‚ùå ERRO CR√çTICO: {str(e)}")
        print("üí° Verifique os logs e pr√©-requisitos antes de tentar novamente")
        raise

if __name__ == "__main__":
    asyncio.run(main())