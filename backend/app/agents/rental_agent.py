from typing import Dict, Any, List
import json
from app.agents.base_agent import BaseContractAgent, ContractAnalysis

class RentalAgent(BaseContractAgent):
    """Specialized agent for rental/lease contract analysis with entity context support"""
    
    def __init__(self, claude_client, rag_service, db_session=None):
        super().__init__(claude_client, rag_service, db_session)
        self.agent_type = "locacao"
        self.specialization = "Loca√ß√£o Residencial"
        self.icon = "üè†"
    
    async def analyze_contract(self, contract_text: str, context: Dict[str, Any] = None) -> ContractAnalysis:
        """Analyze rental contract with specialized knowledge and entity context"""
        
        # Perform entity analysis first
        entity_info = self.entity_classifier.identify_entities(contract_text)
        
        # Get enriched RAG context
        enriched_context = await self.get_enriched_context(
            contract_text, 
            analysis_type="rental_analysis"
        )
        
        # Format context for prompt
        rag_context = self._format_context_for_prompt(enriched_context)
        
        # Get entity-specific context
        entity_context = self._get_entity_context_for_prompt(entity_info)
        
        # Create specialized prompt with entity context
        prompt = self.get_specialized_prompt(contract_text, rag_context, entity_context)
        
        try:
            response = await self.claude_client.completions.create(
                model="claude-3-sonnet-20240229",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=4000,
                temperature=0.1
            )
            
            # Parse structured response
            analysis_data = json.loads(response.content[0].text.strip())
            
            return ContractAnalysis(
                contract_type="locacao",
                risk_level=self._calculate_risk_level(analysis_data.get("risk_factors", [])),
                summary=analysis_data.get("summary", ""),
                key_findings=analysis_data.get("key_findings", []),
                risk_factors=analysis_data.get("risk_factors", []),
                recommendations=analysis_data.get("recommendations", []),
                clauses_analysis=analysis_data.get("clauses_analysis", []),
                confidence_score=analysis_data.get("confidence_score", 0.0)
            )
            
        except Exception as e:
            # Fallback analysis
            return self._create_fallback_analysis(contract_text, str(e))
    
    def _get_entity_context_for_prompt(self, entity_info) -> str:
        """Generate entity-specific context for rental analysis"""
        
        if not entity_info:
            return ""
        
        if entity_info.consumer_protection:
            # B2C Rental - Individual renting from company/professional landlord
            return """
            CONTEXTO JUR√çDICO ESPEC√çFICO - LOCA√á√ÉO B2C:
            - PROTE√á√ÉO DO CONSUMIDOR: Este contrato est√° sujeito ao CDC (C√≥digo de Defesa do Consumidor)
            - LOCAT√ÅRIO PESSOA F√çSICA: Aplicar prote√ß√µes especiais ao inquilino consumidor
            - LOCADOR EMPRESARIAL: Maior responsabilidade sobre informa√ß√µes e cl√°usulas
            - CL√ÅUSULAS ABUSIVAS: Verificar rigorosamente cl√°usulas que limitem direitos do locat√°rio
            - FORO COMPETENTE: Deve ser o domic√≠lio do consumidor (locat√°rio)
            - TRANSPAR√äNCIA: Todas as informa√ß√µes sobre custos devem ser claras e adequadas
            - GARANTIAS: N√£o podem ser excessivas ou desproporcionais
            """
        elif entity_info.party_relationship == "b2b":
            # B2B Rental - Company to company
            return """
            CONTEXTO JUR√çDICO ESPEC√çFICO - LOCA√á√ÉO COMERCIAL B2B:
            - RELA√á√ÉO EMPRESARIAL: Paridade entre as partes contraentes
            - LIBERDADE CONTRATUAL: Maior autonomia para negociar condi√ß√µes especiais
            - FORO DE ELEI√á√ÉO: V√°lido se n√£o prejudicar o equil√≠brio contratual
            - GARANTIAS: Podem ser proporcionais ao porte e risco do neg√≥cio
            - CL√ÅUSULAS ESPECIAIS: Permitidas cl√°usulas comerciais espec√≠ficas
            - ONEROSIDADE: Possibilidade de revis√£o por mudan√ßas econ√¥micas significativas
            """
        elif entity_info.party_relationship == "p2p":
            # P2P Rental - Individual to individual
            return """
            CONTEXTO JUR√çDICO ESPEC√çFICO - LOCA√á√ÉO ENTRE PARTICULARES:
            - C√ìDIGO CIVIL: Rela√ß√£o regida pelo direito civil e Lei do Inquilinato
            - BOA-F√â OBJETIVA: Princ√≠pio fundamental nas obriga√ß√µes
            - EQUIL√çBRIO: Verificar se obriga√ß√µes est√£o equilibradas
            - GARANTIAS: Devem ser proporcionais e razo√°veis
            - FUN√á√ÉO SOCIAL: Contrato deve cumprir fun√ß√£o social
            - VULNERABILIDADE: Proteger a parte mais vulner√°vel economicamente
            """
        else:
            return """
            CONTEXTO JUR√çDICO GERAL - LOCA√á√ÉO:
            - Aplica√ß√£o da Lei do Inquilinato (8.245/91) e C√≥digo Civil
            - Verificar equil√≠brio entre direitos e deveres das partes
            - Analisar proporcionalidade de garantias e obriga√ß√µes
            """
    
    def get_specialized_prompt(self, contract_text: str, rag_context: str = "", entity_context: str = "") -> str:
        """Get rental-specific analysis prompt with entity awareness"""
        
        base_intro = "Voc√™ √© um especialista em contratos de loca√ß√£o imobili√°ria no Brasil. Analise o seguinte contrato de loca√ß√£o considerando a legisla√ß√£o brasileira (Lei do Inquilinato - Lei 8.245/91) e pr√°ticas do mercado."
        
        # Add entity-specific context if available
        if entity_context:
            intro = f"{base_intro}\n\n{entity_context}"
        else:
            intro = base_intro
        
        return f"""
        {intro}

        Contexto de conhecimento especializado:
        {rag_context}

        Contrato para an√°lise:
        {contract_text}

        Analise os seguintes aspectos espec√≠ficos de contratos de loca√ß√£o:

        1. **Valor do aluguel e reajustes**: Verificar se os valores e √≠ndices de reajuste est√£o adequados
        2. **Cau√ß√£o e garantias**: Analisar tipos de garantia exigidos e valores
        3. **Prazo de loca√ß√£o**: Verificar se est√° de acordo com a Lei do Inquilinato
        4. **Responsabilidades de conserva√ß√£o**: Distribui√ß√£o entre locador e locat√°rio
        5. **Cl√°usulas de rescis√£o**: Condi√ß√µes para t√©rmino antecipado
        6. **Multas e penalidades**: Verificar se est√£o dentro dos limites legais
        7. **Reformas e benfeitorias**: Direitos e obriga√ß√µes
        8. **Subloca√ß√£o**: Permiss√µes e restri√ß√µes
        9. **IPTU e taxas**: Responsabilidade pelo pagamento
        10. **Vistoria**: Procedimentos de entrada e sa√≠da

        Identifique cl√°usulas potencialmente abusivas segundo o CDC e Lei do Inquilinato.

        Responda APENAS com um JSON v√°lido no seguinte formato:
        {{
            "summary": "Resumo executivo do contrato",
            "key_findings": ["achado1", "achado2", "achado3"],
            "risk_factors": [
                {{
                    "type": "tipo_do_risco",
                    "description": "descri√ß√£o detalhada",
                    "severity": "high|medium|low",
                    "clause": "cl√°usula espec√≠fica",
                    "recommendation": "recomenda√ß√£o espec√≠fica"
                }}
            ],
            "recommendations": ["recomenda√ß√£o1", "recomenda√ß√£o2"],
            "clauses_analysis": [
                {{
                    "clause": "texto da cl√°usula",
                    "analysis": "an√°lise jur√≠dica",
                    "risk_level": "alto|m√©dio|baixo",
                    "legal_basis": "base legal aplic√°vel"
                }}
            ],
            "confidence_score": 0.95
        }}
        """
    
    def _create_fallback_analysis(self, contract_text: str, error: str) -> ContractAnalysis:
        """Create basic analysis when Claude fails"""
        
        # Basic keyword-based analysis
        high_risk_keywords = ["multa", "penalidade", "rescis√£o", "cau√ß√£o alta"]
        medium_risk_keywords = ["reajuste", "reforma", "subloca√ß√£o"]
        
        contract_lower = contract_text.lower()
        
        risk_factors = []
        for keyword in high_risk_keywords:
            if keyword in contract_lower:
                risk_factors.append({
                    "type": "clausula_identificada",
                    "description": f"Identificada men√ß√£o a {keyword}",
                    "severity": "high",
                    "clause": f"Cont√©m termo: {keyword}",
                    "recommendation": "Revisar com especialista"
                })
        
        return ContractAnalysis(
            contract_type="locacao",
            risk_level=self._calculate_risk_level(risk_factors),
            summary="An√°lise b√°sica por falha na an√°lise especializada",
            key_findings=["An√°lise limitada por erro t√©cnico"],
            risk_factors=risk_factors,
            recommendations=["Solicitar an√°lise completa novamente"],
            clauses_analysis=[],
            confidence_score=0.3
        )
    
    def _format_context_for_prompt(self, enriched_context: Dict[str, Any]) -> str:
        """Format enriched RAG context for use in prompts"""
        
        if isinstance(enriched_context, str):
            return enriched_context  # Fallback for legacy format
        
        formatted_context = ""
        
        # Add legal framework
        if enriched_context.get("legal_framework"):
            formatted_context += "## LEGISLA√á√ÉO APLIC√ÅVEL:\n"
            for law in enriched_context["legal_framework"]:
                formatted_context += f"- {law['source']}: {law['content']}\n"
            formatted_context += "\n"
        
        # Add jurisprudence
        if enriched_context.get("jurisprudence"):
            formatted_context += "## JURISPRUD√äNCIA:\n"
            for case in enriched_context["jurisprudence"]:
                formatted_context += f"- {case['source']}: {case['content']}\n"
            formatted_context += "\n"
        
        # Add recommendations
        if enriched_context.get("recommendations"):
            formatted_context += "## DIRETRIZES ESPECIALIZADAS:\n"
            for rec in enriched_context["recommendations"]:
                formatted_context += f"- {rec['title']}: {rec['content']}\n"
            formatted_context += "\n"
        
        return formatted_context
    
    async def analyze_specific_clause(self, clause_text: str, clause_type: str) -> Dict[str, Any]:
        """Analyze a specific rental contract clause with legal precedents"""
        
        # Get legal precedents for this clause
        precedents = await self.get_legal_precedents(f"{clause_type} {clause_text}")
        
        # Build analysis context
        context = f"Cl√°usula: {clause_text}\n\nTipo: {clause_type}\n\n"
        
        if precedents:
            context += "PRECEDENTES LEGAIS:\n"
            for precedent in precedents:
                context += f"- {precedent['court']}: {precedent['content'][:200]}...\n"
        
        prompt = f"""
        Analise esta cl√°usula espec√≠fica de contrato de loca√ß√£o:

        {context}

        Forne√ßa uma an√°lise detalhada considerando:
        1. Legalidade da cl√°usula
        2. Riscos para o locat√°rio
        3. Riscos para o locador
        4. Precedentes jurisprudenciais aplic√°veis
        5. Recomenda√ß√µes de altera√ß√£o

        Responda em formato JSON:
        {{
            "legality": "legal|question√°vel|ilegal",
            "tenant_risks": ["risco1", "risco2"],
            "landlord_risks": ["risco1", "risco2"],
            "legal_basis": "base legal aplic√°vel",
            "recommendations": ["recomenda√ß√£o1", "recomenda√ß√£o2"],
            "severity": "alta|m√©dia|baixa"
        }}
        """
        
        try:
            response = await self.claude_client.completions.create(
                model="claude-3-sonnet-20240229",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=2000,
                temperature=0.1
            )
            
            return json.loads(response.content[0].text.strip())
            
        except Exception as e:
            return {
                "legality": "question√°vel",
                "tenant_risks": ["An√°lise indispon√≠vel devido a erro t√©cnico"],
                "landlord_risks": [],
                "legal_basis": "N√£o dispon√≠vel",
                "recommendations": ["Solicitar an√°lise manual"],
                "severity": "m√©dia"
            }
    
    def generate_response(self, question: str, contract_text: str = "") -> str:
        """Generate specialized rental response with entity context awareness"""
        
        # Analyze entities if contract text is provided
        entity_info = None
        if contract_text:
            entity_info = self.entity_classifier.identify_entities(contract_text)
        
        if not question:
            base_response = """üè† **Loca√ß√£o Residencial - An√°lise Especializada**

Ol√°! Sou especialista em contratos de loca√ß√£o imobili√°ria. Posso ajudar com:

**üìã Principais An√°lises:**
‚Ä¢ Valores de aluguel e reajustes
‚Ä¢ Garantias e cau√ß√µes exigidas
‚Ä¢ Cl√°usulas de rescis√£o e multas
‚Ä¢ Responsabilidades de conserva√ß√£o
‚Ä¢ Direitos e deveres do locat√°rio

**‚ö†Ô∏è Pontos Cr√≠ticos Comuns:**
‚Ä¢ Valores de cau√ß√£o excessivos
‚Ä¢ Cl√°usulas de reajuste abusivas
‚Ä¢ Multas desproporcionais
‚Ä¢ Transfer√™ncia inadequada de responsabilidades

**‚öñÔ∏è Base Legal:**
Lei do Inquilinato (8.245/91) + C√≥digo Civil"""

            # Add entity-specific information if available
            if entity_info:
                if entity_info.consumer_protection:
                    base_response += """

**üõ°Ô∏è PROTE√á√ÉO ESPECIAL - B2C:**
Este contrato est√° sujeito ao CDC. Como locat√°rio consumidor, voc√™ tem:
‚Ä¢ Prote√ß√£o contra cl√°usulas abusivas
‚Ä¢ Direito a informa√ß√µes claras e adequadas
‚Ä¢ Foro competente no seu domic√≠lio
‚Ä¢ Garantias proporcionais e razo√°veis"""
                elif entity_info.party_relationship == "b2b":
                    base_response += """

**üè¢ LOCA√á√ÉO COMERCIAL - B2B:**
Rela√ß√£o entre empresas com maior liberdade contratual:
‚Ä¢ Negocia√ß√£o parit√°ria de condi√ß√µes
‚Ä¢ Cl√°usulas comerciais espec√≠ficas permitidas
‚Ä¢ Garantias adequadas ao porte empresarial
‚Ä¢ Foro de elei√ß√£o v√°lido"""
                elif entity_info.party_relationship == "p2p":
                    base_response += """

**üë• LOCA√á√ÉO ENTRE PARTICULARES - P2P:**
Rela√ß√£o civil regida pelo C√≥digo Civil:
‚Ä¢ Princ√≠pio da boa-f√© objetiva
‚Ä¢ Equil√≠brio entre direitos e deveres
‚Ä¢ Fun√ß√£o social do contrato
‚Ä¢ Prote√ß√£o da parte mais vulner√°vel"""
            
            return base_response + "\n\nComo posso ajudar com sua situa√ß√£o espec√≠fica?"
        
        # Handle specific questions with entity context
        question_lower = question.lower()
        
        # Add entity context to responses
        entity_context = ""
        if entity_info and entity_info.consumer_protection:
            entity_context = "\n\n**‚öñÔ∏è Contexto Jur√≠dico:** Como este √© um contrato B2C (empresa‚Üípessoa f√≠sica), aplicam-se as prote√ß√µes do CDC al√©m da Lei do Inquilinato."
        elif entity_info and entity_info.party_relationship == "b2b":
            entity_context = "\n\n**‚öñÔ∏è Contexto Jur√≠dico:** Como este √© um contrato B2B (empresa‚Üíempresa), h√° maior liberdade contratual, mas deve haver equil√≠brio entre as partes."
        elif entity_info and entity_info.party_relationship == "p2p":
            entity_context = "\n\n**‚öñÔ∏è Contexto Jur√≠dico:** Como este √© um contrato entre particulares, aplicam-se os princ√≠pios do C√≥digo Civil e boa-f√© objetiva."
        
        # Return base response with context
        base_response = "üè† **Loca√ß√£o - Orienta√ß√£o Especializada**\n\n"
        base_response += f"Sobre sua pergunta: \"{question}\"\n\n"
        base_response += "Posso ajudar com an√°lise detalhada de contratos de loca√ß√£o considerando:\n"
        base_response += "‚Ä¢ Lei do Inquilinato (8.245/91)\n"
        base_response += "‚Ä¢ C√≥digo de Defesa do Consumidor (quando aplic√°vel)\n"  
        base_response += "‚Ä¢ Jurisprud√™ncia espec√≠fica sobre loca√ß√µes\n"
        base_response += entity_context
        
        return base_response
