"""
Servidor simplificado para demonstra√ß√£o sem depend√™ncias complexas
"""
import os
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

# Configurar vari√°vel de ambiente para usar mocks
os.environ["USE_MOCK_RAG"] = "True"

app = FastAPI(
    title="Contrato Seguro API - Demo",
    description="API demo para an√°lise inteligente de contratos brasileiros",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
)

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    return {
        "message": "Contrato Seguro API - Demonstra√ß√£o",
        "version": "1.0.0",
        "status": "active",
        "mode": "development",
        "features": {
            "mock_rag": True,
            "mock_llm": True,
            "mock_ocr": True,
            "demo_endpoints": True
        }
    }

@app.get("/health")
async def health_check():
    return {"status": "healthy", "mode": "development"}

@app.get("/api/v1/demo/analyze")
async def demo_analyze():
    """Endpoint de demonstra√ß√£o para an√°lise de contratos"""
    from app.services.mock_llm_service import mock_llm_service
    
    sample_contract = """
    CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS DE INTERNET
    
    Cl√°usula 1: A velocidade de internet √© de at√© 100 Mbps, n√£o sendo garantida.
    Cl√°usula 2: O contrato tem perman√™ncia m√≠nima de 24 meses.
    Cl√°usula 3: Em caso de cancelamento antecipado, ser√° cobrada multa de R$ 2.000,00.
    Cl√°usula 4: A empresa n√£o se responsabiliza por instabilidades na conex√£o.
    Cl√°usula 5: O reajuste ser√° feito anualmente conforme IGP-M.
    """
    
    analysis = await mock_llm_service.analyze_contract(sample_contract)
    
    return {
        "message": "Demonstra√ß√£o de an√°lise de contrato",
        "contract_sample": sample_contract,
        "analysis": analysis
    }

@app.get("/api/v1/demo/search")
async def demo_search(query: str = "cl√°usulas abusivas"):
    """Endpoint de demonstra√ß√£o para busca na base jur√≠dica"""
    from app.services.mock_rag_service import mock_rag_service
    
    results = await mock_rag_service.search_similar_content(query, limit=3)
    
    return {
        "message": "Demonstra√ß√£o de busca na base jur√≠dica",
        "query": query,
        "results": results,
        "total_found": len(results)
    }

@app.post("/api/v1/demo/analyze-text")
async def demo_analyze_text(contract_data: dict):
    """Analisa texto de contrato enviado pelo usu√°rio"""
    from app.services.mock_llm_service import mock_llm_service
    
    contract_text = contract_data.get("text", "")
    contract_type = contract_data.get("type", None)
    
    if not contract_text:
        return {"error": "Texto do contrato √© obrigat√≥rio"}
    
    analysis = await mock_llm_service.analyze_contract(contract_text, contract_type)
    
    return {
        "message": "An√°lise conclu√≠da",
        "input_text": contract_text[:200] + "..." if len(contract_text) > 200 else contract_text,
        "analysis": analysis
    }

@app.post("/api/v1/demo/chat")
async def demo_chat(chat_data: dict):
    """Chat sobre an√°lise de contrato"""
    from app.services.mock_llm_service import mock_llm_service
    
    contract_analysis = chat_data.get("contract_analysis", {})
    user_question = chat_data.get("question", "")
    
    if not user_question:
        return {"error": "Pergunta √© obrigat√≥ria"}
    
    response = await mock_llm_service.chat_with_contract(contract_analysis, user_question)
    
    return {
        "question": user_question,
        "response": response,
        "context": "Esta √© uma resposta automatizada baseada na an√°lise do contrato"
    }

if __name__ == "__main__":
    import uvicorn
    
    print(f"\n{'='*60}")
    print(f"üöÄ Democratiza AI - Contrato Seguro DEMO")
    print(f"{'='*60}")
    print(f"Modo: Desenvolvimento (Mock)")
    print(f"Documenta√ß√£o: http://localhost:8000/docs")
    print(f"Demo An√°lise: http://localhost:8000/api/v1/demo/analyze")
    print(f"Demo Busca: http://localhost:8000/api/v1/demo/search?query=locacao")
    print(f"{'='*60}\n")
    
    uvicorn.run(
        "simple_demo:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    )