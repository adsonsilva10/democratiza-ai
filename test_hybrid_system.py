"""
Teste do Sistema H√≠brido Gemini + Anthropic
Verifica se a integra√ß√£o est√° funcionando com a API key real
"""

import asyncio
import os
import sys
from pathlib import Path

# Adicionar path do backend
backend_path = Path(__file__).parent / "backend"
sys.path.append(str(backend_path))

try:
    from app.core.config import settings
    from app.services.llm_router import LLMRouter, ComplexityLevel
    from app.services.llm_client import LLMClientFactory
except ImportError as e:
    print(f"‚ùå Erro de importa√ß√£o: {e}")
    print("Certifique-se de estar na pasta raiz do projeto")
    sys.exit(1)

class HybridSystemTester:
    """Testa o sistema h√≠brido com APIs reais"""
    
    def __init__(self):
        self.router = LLMRouter()
        self.factory = LLMClientFactory()
        
    async def test_api_keys(self):
        """Verifica se as API keys est√£o configuradas"""
        
        print("üîë VERIFICANDO CONFIGURA√á√ÉO DAS API KEYS")
        print("-" * 45)
        
        # Google Gemini
        if hasattr(settings, 'GOOGLE_API_KEY') and settings.GOOGLE_API_KEY:
            if settings.GOOGLE_API_KEY.startswith('AIza'):
                print("‚úÖ Google Gemini API Key configurada corretamente")
                google_configured = True
            else:
                print("‚ö†Ô∏è Google Gemini API Key formato inv√°lido")
                google_configured = False
        else:
            print("‚ùå Google Gemini API Key n√£o encontrada")
            google_configured = False
        
        # Anthropic Claude
        if hasattr(settings, 'ANTHROPIC_API_KEY') and settings.ANTHROPIC_API_KEY:
            if settings.ANTHROPIC_API_KEY.startswith('sk-ant-'):
                print("‚úÖ Anthropic Claude API Key configurada corretamente")
                anthropic_configured = True
            else:
                print("‚ö†Ô∏è Anthropic Claude API Key formato inv√°lido")
                anthropic_configured = False
        else:
            print("‚ùå Anthropic Claude API Key n√£o encontrada")
            anthropic_configured = False
        
        return google_configured, anthropic_configured

    async def test_llm_clients(self):
        """Testa a cria√ß√£o dos clientes LLM"""
        
        print(f"\nü§ñ TESTANDO CLIENTES LLM")
        print("-" * 30)
        
        # Testar Google Gemini Flash
        try:
            gemini_flash = self.factory.create_client("GEMINI_FLASH")
            print("‚úÖ Google Gemini Flash client criado")
        except Exception as e:
            print(f"‚ùå Erro Gemini Flash: {e}")
        
        # Testar Google Gemini Pro
        try:
            gemini_pro = self.factory.create_client("GEMINI_PRO")
            print("‚úÖ Google Gemini Pro client criado")
        except Exception as e:
            print(f"‚ùå Erro Gemini Pro: {e}")
        
        # Testar Claude Sonnet
        try:
            claude_sonnet = self.factory.create_client("CLAUDE_SONNET")
            print("‚úÖ Claude Sonnet client criado")
        except Exception as e:
            print(f"‚ùå Erro Claude Sonnet: {e}")
        
        # Testar Claude Opus
        try:
            claude_opus = self.factory.create_client("CLAUDE_OPUS")
            print("‚úÖ Claude Opus client criado")
        except Exception as e:
            print(f"‚ùå Erro Claude Opus: {e}")

    async def test_complexity_routing(self):
        """Testa o roteamento por complexidade"""
        
        print(f"\nüéØ TESTANDO ROTEAMENTO INTELIGENTE")
        print("-" * 40)
        
        test_contracts = {
            "Netflix Premium": {
                "text": "Contrato de assinatura mensal Netflix Premium por R$ 45,90 com renova√ß√£o autom√°tica...",
                "expected": ComplexityLevel.SIMPLES
            },
            "Loca√ß√£o Residencial": {
                "text": "Contrato de loca√ß√£o de im√≥vel residencial, valor mensal R$ 2.800, prazo 24 meses, com fiador e seguro fian√ßa...",
                "expected": ComplexityLevel.MEDIO
            },
            "Consultoria Empresarial": {
                "text": "Presta√ß√£o de servi√ßos de consultoria em tecnologia da informa√ß√£o, valor total R$ 240.000, prazo 12 meses, com cl√°usulas de propriedade intelectual...",
                "expected": ComplexityLevel.COMPLEXO
            },
            "PGBL Previd√™ncia": {
                "text": "Plano Gerador de Benef√≠cio Livre, contribui√ß√£o inicial R$ 50.000, taxa de administra√ß√£o 2,5% a.a., modalidade de tributa√ß√£o regressiva...",
                "expected": ComplexityLevel.ESPECIALIZADO
            }
        }
        
        for contract_name, data in test_contracts.items():
            try:
                complexity = await self.router.analyze_complexity(data["text"])
                model_info = await self.router.route_to_best_model(data["text"])
                
                expected = data["expected"]
                status = "‚úÖ" if complexity == expected else "‚ö†Ô∏è"
                
                print(f"{status} {contract_name}:")
                print(f"   Complexidade: {complexity.value} (esperado: {expected.value})")
                print(f"   Modelo: {model_info['model']} (${model_info['cost_per_1k']}/1k tokens)")
                print()
                
            except Exception as e:
                print(f"‚ùå Erro testando {contract_name}: {e}")
                print()

    async def test_real_api_call(self):
        """Testa uma chamada real para a API (se as keys estiverem configuradas)"""
        
        print(f"\nüöÄ TESTE COM API REAL (GEMINI)")
        print("-" * 35)
        
        if not (hasattr(settings, 'GOOGLE_API_KEY') and settings.GOOGLE_API_KEY):
            print("‚ùå Google API Key n√£o configurada - pulando teste real")
            return
        
        try:
            # Testar an√°lise simples com Gemini Flash
            simple_contract = "Contrato de assinatura Netflix Premium por R$ 45,90 mensal."
            
            model_info = await self.router.route_to_best_model(simple_contract)
            print(f"üéØ Roteamento: {model_info['model']} (${model_info['cost_per_1k']}/1k tokens)")
            
            # Criar cliente e fazer chamada real
            client = self.factory.create_client(model_info['provider'])
            
            prompt = f"""
            Analise este contrato brasileiro de forma jur√≠dica:
            
            {simple_contract}
            
            Identifique:
            1. Tipo de contrato
            2. Principal risco para o consumidor
            3. Recomenda√ß√£o em 1 frase
            
            Responda de forma objetiva em portugu√™s.
            """
            
            print("‚è≥ Fazendo chamada para API...")
            response = await client.generate_response(prompt, max_tokens=200)
            
            print("‚úÖ RESPOSTA DA IA:")
            print(f"   {response}")
            print()
            print(f"üí∞ Custo estimado: ${(200/1000) * model_info['cost_per_1k']:.6f}")
            
        except Exception as e:
            print(f"‚ùå Erro na chamada real: {e}")

    async def run_full_test(self):
        """Executa todos os testes do sistema h√≠brido"""
        
        print("üß™ DEMOCRATIZA AI - TESTE DO SISTEMA H√çBRIDO")
        print("=" * 55)
        print("üéØ Verificando integra√ß√£o Gemini + Anthropic")
        print()
        
        # 1. Verificar API Keys
        google_ok, anthropic_ok = await self.test_api_keys()
        
        # 2. Testar clientes LLM
        await self.test_llm_clients()
        
        # 3. Testar roteamento
        await self.test_complexity_routing()
        
        # 4. Teste real se poss√≠vel
        if google_ok:
            await self.test_real_api_call()
        
        # Resultado final
        print("üèÜ RESULTADO DOS TESTES")
        print("-" * 25)
        
        if google_ok and anthropic_ok:
            print("‚úÖ Sistema h√≠brido COMPLETAMENTE FUNCIONAL!")
            print("üöÄ Economia de 64% ativada!")
            print("‚ö° Pronto para an√°lise de contratos em produ√ß√£o!")
        elif google_ok:
            print("‚úÖ Google Gemini funcionando (economia ativada)")
            print("‚ö†Ô∏è Anthropic Claude pendente (qualidade limitada)")
        elif anthropic_ok:
            print("‚úÖ Anthropic Claude funcionando")  
            print("‚ö†Ô∏è Google Gemini pendente (sem economia m√°xima)")
        else:
            print("‚ùå APIs n√£o configuradas")
            print("üîß Configure as API keys para ativar o sistema")

async def main():
    """Executa teste completo do sistema h√≠brido"""
    
    print("üîç Iniciando teste do sistema h√≠brido...")
    print()
    
    try:
        tester = HybridSystemTester()
        await tester.run_full_test()
        
    except Exception as e:
        print(f"‚ùå Erro fatal no teste: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())