"""
Script simplificado para popular a base de conhecimento
Usa dados sint√©ticos essenciais para come√ßar
"""
import asyncio
import os
import sys
from datetime import datetime
from pathlib import Path

# Add backend to path
sys.path.insert(0, str(Path(__file__).parent / "backend"))
sys.path.insert(0, str(Path(__file__).parent))

from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

# Carregar .env
load_dotenv()

# Dados essenciais da legisla√ß√£o brasileira
ESSENTIAL_KNOWLEDGE = [
    # CDC - C√≥digo de Defesa do Consumidor
    {
        "source": "Lei 8.078/1990 (CDC)",
        "category": "consumer_protection",
        "article": "Art. 6¬∫, III",
        "content": "S√£o direitos b√°sicos do consumidor: III - a informa√ß√£o adequada e clara sobre os diferentes produtos e servi√ßos, com especifica√ß√£o correta de quantidade, caracter√≠sticas, composi√ß√£o, qualidade, tributos incidentes e pre√ßo, bem como sobre os riscos que apresentem."
    },
    {
        "source": "Lei 8.078/1990 (CDC)",
        "category": "consumer_protection",
        "article": "Art. 39, V",
        "content": "√â vedado ao fornecedor de produtos ou servi√ßos: V - exigir do consumidor vantagem manifestamente excessiva."
    },
    {
        "source": "Lei 8.078/1990 (CDC)",
        "category": "consumer_protection",
        "article": "Art. 51, IV",
        "content": "S√£o nulas de pleno direito, entre outras, as cl√°usulas contratuais relativas ao fornecimento de produtos e servi√ßos que: IV - estabele√ßam obriga√ß√µes consideradas in√≠quas, abusivas, que coloquem o consumidor em desvantagem exagerada, ou sejam incompat√≠veis com a boa-f√© ou a equidade."
    },
    
    # Lei do Inquilinato
    {
        "source": "Lei 8.245/1991 (Lei do Inquilinato)",
        "category": "rental_law",
        "article": "Art. 22",
        "content": "O locador √© obrigado a: I - entregar ao locat√°rio o im√≥vel alugado em estado de servir ao uso a que se destina; II - garantir, durante o tempo da loca√ß√£o, o uso pac√≠fico do im√≥vel locado."
    },
    {
        "source": "Lei 8.245/1991 (Lei do Inquilinato)",
        "category": "rental_law",
        "article": "Art. 23",
        "content": "O locat√°rio √© obrigado a: I - pagar pontualmente o aluguel e os encargos da loca√ß√£o, legal ou contratualmente exig√≠veis, no prazo estipulado ou, em sua falta, at√© o sexto dia √∫til do m√™s vincendo."
    },
    
    # C√≥digo Civil - Contratos
    {
        "source": "Lei 10.406/2002 (C√≥digo Civil)",
        "category": "civil_contracts",
        "article": "Art. 421",
        "content": "A liberdade contratual ser√° exercida nos limites da fun√ß√£o social do contrato."
    },
    {
        "source": "Lei 10.406/2002 (C√≥digo Civil)",
        "category": "civil_contracts",
        "article": "Art. 422",
        "content": "Os contratantes s√£o obrigados a guardar, assim na conclus√£o do contrato, como em sua execu√ß√£o, os princ√≠pios de probidade e boa-f√©."
    },
    {
        "source": "Lei 10.406/2002 (C√≥digo Civil)",
        "category": "civil_contracts",
        "article": "Art. 423",
        "content": "Quando houver no contrato de ades√£o cl√°usulas amb√≠guas ou contradit√≥rias, dever-se-√° adotar a interpreta√ß√£o mais favor√°vel ao aderente."
    },
    
    # Marco Civil da Internet
    {
        "source": "Lei 12.965/2014 (Marco Civil da Internet)",
        "category": "telecommunications",
        "article": "Art. 7¬∫, VIII",
        "content": "O acesso √† internet √© essencial ao exerc√≠cio da cidadania, e ao usu√°rio s√£o asseguradas as seguintes garantias: VIII - informa√ß√µes claras e completas sobre coleta, uso, armazenamento, tratamento e prote√ß√£o de seus dados pessoais, que somente poder√£o ser utilizados para finalidades que justifiquem sua coleta e n√£o sejam vedadas pela legisla√ß√£o."
    },
    
    # LGPD
    {
        "source": "Lei 13.709/2018 (LGPD)",
        "category": "data_protection",
        "article": "Art. 6¬∫, I",
        "content": "As atividades de tratamento de dados pessoais dever√£o observar a boa-f√© e os seguintes princ√≠pios: I - finalidade: realiza√ß√£o do tratamento para prop√≥sitos leg√≠timos, espec√≠ficos, expl√≠citos e informados ao titular."
    },
    
    # Direito Previdenci√°rio - Lei de Benef√≠cios da Previd√™ncia Social
    {
        "source": "Lei 8.213/1991 (Plano de Benef√≠cios da Previd√™ncia Social)",
        "category": "retirement_pension",
        "article": "Art. 18, I",
        "content": "O Regime Geral de Previd√™ncia Social compreende as seguintes presta√ß√µes, devidas inclusive em raz√£o de eventos decorrentes de acidente do trabalho, expressas em benef√≠cios e servi√ßos: I - quanto ao segurado: a) aposentadoria por invalidez; b) aposentadoria por idade; c) aposentadoria por tempo de contribui√ß√£o; d) aposentadoria especial; e) aux√≠lio-doen√ßa; f) sal√°rio-fam√≠lia; g) sal√°rio-maternidade; h) aux√≠lio-acidente."
    },
    {
        "source": "Lei 8.213/1991 (Plano de Benef√≠cios da Previd√™ncia Social)",
        "category": "retirement_pension",
        "article": "Art. 48",
        "content": "A aposentadoria por idade ser√° devida ao segurado que, cumprida a car√™ncia exigida, completar 65 (sessenta e cinco) anos de idade, se homem, e 62 (sessenta e dois) anos, se mulher. ¬ß 1¬∫ Os limites fixados no caput s√£o reduzidos para sessenta e cinquenta e cinco anos no caso de trabalhadores rurais."
    },
    {
        "source": "Lei 8.213/1991 (Plano de Benef√≠cios da Previd√™ncia Social)",
        "category": "retirement_pension",
        "article": "Art. 74",
        "content": "A pens√£o por morte ser√° devida ao conjunto dos dependentes do segurado que falecer, aposentado ou n√£o, a contar da data: I - do √≥bito, quando requerida at√© 90 (noventa) dias depois deste; II - do requerimento, quando requerida ap√≥s o prazo previsto no inciso anterior."
    },
    {
        "source": "Lei 8.213/1991 (Plano de Benef√≠cios da Previd√™ncia Social)",
        "category": "retirement_pension",
        "article": "Art. 77",
        "content": "A pens√£o por morte concedida a dependente inv√°lido ou com defici√™ncia ter√° dura√ß√£o indeterminada. A pens√£o por morte havida por outros dependentes ter√° os seguintes prazos de dura√ß√£o: I - 4 (quatro) meses se o √≥bito ocorrer sem que o segurado tenha vertido 18 (dezoito) contribui√ß√µes mensais; II - dura√ß√£o vari√°vel conforme idade do benefici√°rio."
    },
    {
        "source": "Emenda Constitucional 103/2019 (Reforma da Previd√™ncia)",
        "category": "retirement_pension",
        "article": "Art. 201, ¬ß7¬∫, I",
        "content": "√â assegurada aposentadoria no regime geral de previd√™ncia social, nos termos da lei, obedecidas as seguintes condi√ß√µes: I - 65 (sessenta e cinco) anos de idade, se homem, e 62 (sessenta e dois) anos de idade, se mulher, observado tempo m√≠nimo de contribui√ß√£o."
    },
    {
        "source": "Lei 8.213/1991 (Plano de Benef√≠cios da Previd√™ncia Social)",
        "category": "retirement_pension",
        "article": "Art. 57",
        "content": "A aposentadoria especial ser√° devida, uma vez cumprida a car√™ncia exigida, ao segurado empregado, trabalhador avulso e contribuinte individual, este somente quando cooperado filiado a cooperativa de trabalho ou de produ√ß√£o, que tenha trabalhado sujeito a condi√ß√µes especiais que prejudiquem a sa√∫de ou a integridade f√≠sica, durante 15 (quinze), 20 (vinte) ou 25 (vinte e cinco) anos."
    },
    {
        "source": "Lei 8.213/1991 (Plano de Benef√≠cios da Previd√™ncia Social)",
        "category": "retirement_pension",
        "article": "Art. 29, ¬ß5¬∫",
        "content": "N√£o ser√° computado como tempo de contribui√ß√£o, para efeito de concess√£o do benef√≠cio de que trata esta subse√ß√£o, o per√≠odo em que o segurado contribuinte individual ou facultativo tiver contribu√≠do na forma do ¬ß 2¬∫ do art. 21 da Lei n¬∫ 8.212, de 24 de julho de 1991, salvo se tiver complementado as contribui√ß√µes na forma do ¬ß 3¬∫ do mesmo artigo."
    }
]

def populate_knowledge_base():
    """Popula a base de conhecimento com dados essenciais"""
    
    print("\n" + "="*60)
    print("üìö POPULA√á√ÉO DA BASE DE CONHECIMENTO JUR√çDICO")
    print("="*60)
    
    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        print("‚ùå DATABASE_URL n√£o configurado!")
        return False
    
    try:
        engine = create_engine(database_url)
        Session = sessionmaker(bind=engine)
        session = Session()
        
        print(f"\nüìä Inserindo {len(ESSENTIAL_KNOWLEDGE)} documentos essenciais...")
        print(f"   üìö Categorias: consumer_protection, rental_law, civil_contracts,")
        print(f"                  telecommunications, data_protection, retirement_pension")
        
        inserted = 0
        for doc in ESSENTIAL_KNOWLEDGE:
            try:
                import json
                
                # Criar metadata com source, category e article
                metadata = {
                    "source": doc["source"],
                    "category": doc["category"],
                    "article": doc["article"]
                }
                
                # Inserir documento (schema correto: content + metadata)
                result = session.execute(text("""
                    INSERT INTO knowledge_base 
                    (content, metadata, created_at)
                    VALUES 
                    (:content, :metadata, :created_at)
                    RETURNING id
                """), {
                    "content": doc["content"],
                    "metadata": json.dumps(metadata),
                    "created_at": datetime.now()
                })
                
                doc_id = result.scalar()
                print(f"   ‚úÖ {doc_id} - {doc['source']} - {doc['article']}")
                inserted += 1
                
            except Exception as e:
                print(f"   ‚ùå Erro ao inserir {doc['article']}: {e}")
        
        session.commit()
        session.close()
        
        print(f"\n‚úÖ {inserted}/{len(ESSENTIAL_KNOWLEDGE)} documentos inseridos com sucesso!")
        
        # Verificar total
        with engine.connect() as conn:
            result = conn.execute(text("SELECT COUNT(*) FROM knowledge_base"))
            total = result.scalar()
            print(f"üìä Total na base: {total} documentos")
        
        print("\n‚ö†Ô∏è  NOTA: Embeddings ser√£o gerados ao testar o RAG Service")
        print("   Execute: python test_openai_embeddings.py")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erro ao popular base: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    print("\n" + "üöÄ"*30)
    print("DEMOCRATIZA AI - BOOTSTRAP DA BASE JUR√çDICA")
    print("üöÄ"*30)
    
    success = populate_knowledge_base()
    
    print("\n" + "="*60)
    if success:
        print("‚úÖ POPULA√á√ÉO CONCLU√çDA!")
        print("\nüìã Pr√≥ximos passos:")
        print("  1. python check_knowledge_base.py  # Verificar")
        print("  2. cd backend")
        print("  3. python test_openai_embeddings.py  # Gerar embeddings")
    else:
        print("‚ùå FALHA NA POPULA√á√ÉO")
    print("="*60)
    print()
